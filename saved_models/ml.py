# -*- coding: utf-8 -*-
"""ML.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_LHx8_Pbu5d09SJuV_4i_6Wl7nk72PTX
"""

# Commented out IPython magic to ensure Python compatibility.
import logging
import pandas as pd
import numpy as np
from numpy import random
import gensim
import nltk
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer
from sklearn.metrics import accuracy_score, confusion_matrix
import matplotlib.pyplot as plt
from nltk.corpus import stopwords
import re
from bs4 import BeautifulSoup
# %matplotlib inline

labels_map = pd.read_csv('cd_categories.csv')
labels_map = labels_map[pd.notnull(labels_map)]
labels_map.head()

df = pd.read_csv('cd_mumbai_complaints.csv')
df = df[pd.notnull(df)]
df.head(10)

df.replace('nan', np.nan, inplace=True)
df.dropna(inplace=True)
print(len(df))

X = df['created_at']
y = df['description']

len(X)

REPLACE_BY_SPACE_RE = re.compile('[/(){}\[\]\|@,;]\n')

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state = 42)

from sklearn.naive_bayes import MultinomialNB
from sklearn.pipeline import Pipeline
from sklearn.feature_extraction.text import TfidfTransformer

nb = Pipeline([('vect', CountVectorizer()),
               ('tfidf', TfidfTransformer()),
               ('clf', MultinomialNB()),
              ])

nb.fit(X_train, y_train)

from sklearn.metrics import classification_report
y_pred = nb.predict(X_test)

print('accuracy %s' % accuracy_score(y_pred, y_test))

y_pred[:5]

y_test[:5]

from sklearn.linear_model import SGDClassifier

sgd = Pipeline([('vect', CountVectorizer()),
                ('tfidf', TfidfTransformer()),
                ('clf', SGDClassifier(loss='hinge', penalty='l2',alpha=1e-3, random_state=42, max_iter=5, tol=None)),
               ])
sgd.fit(X_train, y_train)


y_pred = sgd.predict(X_test)

print('accuracy %s' % accuracy_score(y_pred, y_test))

y_pred[:5]

y_test[:5]

import pickle
# save the classifier
with open('sdg.pkl', 'wb') as fid:
    pickle.dump(sgd, fid)    

# load it again
# with open('my_dumped_classifier.pkl', 'rb') as fid:
#     gnb_loaded = cPickle.load(fid)

